# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build

on:
  push:
    branches:
      - "develop"
  pull_request:
    branches:
      - "*"
  workflow_call: {}

permissions:
  contents: read

jobs:
  Build:
    outputs:
      run_id: "${{github.run_id}}"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # We need tags and commits since the last tag for versioning
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            7.0.x
            8.0.x

      - name: Get latest git tag
        id: git_tag
        run: |
          if [ -z "$git_tag" ]; then
            echo "git_tag=$(git describe --tags --dirty=-dirty)" >> $GITHUB_ENV
          fi
      - name: Set build variables
        id: build-vars
        run: |
          GIT_VERSION="${{env.git_tag}}"
          PREFIX=$(echo "$GIT_VERSION" | cut -d '-' -f 1)
          SUFFIX=$(echo "$GIT_VERSION" | cut -d '-' -f 2- -s)

          echo "version_prefix=${PREFIX}" >> $GITHUB_ENV

          if [[ "${{ github.ref }}" == "refs/tags"* ]]; then
            if [[ ! -z "$SUFFIX" ]]; then
              echo "Tag release determined a suffix: $SUFFIX"
              exit 1;
            fi

            echo "version_suffix=$SUFFIX" >> $GITHUB_ENV
            echo "package_suffix=release" >> $GITHUB_ENV
          else
            echo "version_suffix=dev-${SUFFIX}" >> $GITHUB_ENV
            echo "package_suffix=snapshot" >> $GITHUB_ENV
          fi

      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore -p:VersionPrefix="${{env.version_prefix}}" -p:VersionSuffix="${{env.version_suffix}}"
      #    - name: Upload a Build Artifact
      #      uses: actions/upload-artifact@v3.1.2
      #      with:
      #        if-no-files-found: warn
      #        name: build
      #        path: |
      #          */bin/Debug
      - name: Test
        run: dotnet test --no-build --verbosity normal -p:VersionPrefix="${{env.version_prefix}}" -p:VersionSuffix="${{env.version_suffix}}" --logger "trx;LogFileName=test-results.trx"
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3.1.2
        with:
          name: test-results
          path: "**/test-results.trx"

      - name: Pack
        run: dotnet pack --no-build -c Debug -p:VersionPrefix="${{env.version_prefix}}" -p:VersionSuffix="${{env.version_suffix}}" --output nupkgs
      - name: Pack Symbols
        run: dotnet pack --no-build -c Debug -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg -p:VersionPrefix="${{env.version_prefix}}" -p:VersionSuffix="${{env.version_suffix}}" --output nupkgs
      - name: Upload nupkgs
        uses: actions/upload-artifact@v3.1.2
        with:
          if-no-files-found: error
          name: "nupkgs-${{env.package_suffix}}"
          path: nupkgs
